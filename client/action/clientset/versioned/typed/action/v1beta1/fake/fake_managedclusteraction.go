// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/stolostron/cluster-lifecycle-api/action/v1beta1"
	actionv1beta1 "github.com/stolostron/cluster-lifecycle-api/client/action/clientset/versioned/typed/action/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeManagedClusterActions implements ManagedClusterActionInterface
type fakeManagedClusterActions struct {
	*gentype.FakeClientWithList[*v1beta1.ManagedClusterAction, *v1beta1.ManagedClusterActionList]
	Fake *FakeActionV1beta1
}

func newFakeManagedClusterActions(fake *FakeActionV1beta1, namespace string) actionv1beta1.ManagedClusterActionInterface {
	return &fakeManagedClusterActions{
		gentype.NewFakeClientWithList[*v1beta1.ManagedClusterAction, *v1beta1.ManagedClusterActionList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("managedclusteractions"),
			v1beta1.SchemeGroupVersion.WithKind("ManagedClusterAction"),
			func() *v1beta1.ManagedClusterAction { return &v1beta1.ManagedClusterAction{} },
			func() *v1beta1.ManagedClusterActionList { return &v1beta1.ManagedClusterActionList{} },
			func(dst, src *v1beta1.ManagedClusterActionList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.ManagedClusterActionList) []*v1beta1.ManagedClusterAction {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.ManagedClusterActionList, items []*v1beta1.ManagedClusterAction) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
