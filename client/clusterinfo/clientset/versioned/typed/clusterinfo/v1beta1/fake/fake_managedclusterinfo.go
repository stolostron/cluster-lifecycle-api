// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clusterinfov1beta1 "github.com/stolostron/cluster-lifecycle-api/client/clusterinfo/clientset/versioned/typed/clusterinfo/v1beta1"
	v1beta1 "github.com/stolostron/cluster-lifecycle-api/clusterinfo/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeManagedClusterInfos implements ManagedClusterInfoInterface
type fakeManagedClusterInfos struct {
	*gentype.FakeClientWithList[*v1beta1.ManagedClusterInfo, *v1beta1.ManagedClusterInfoList]
	Fake *FakeInternalV1beta1
}

func newFakeManagedClusterInfos(fake *FakeInternalV1beta1, namespace string) clusterinfov1beta1.ManagedClusterInfoInterface {
	return &fakeManagedClusterInfos{
		gentype.NewFakeClientWithList[*v1beta1.ManagedClusterInfo, *v1beta1.ManagedClusterInfoList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("managedclusterinfos"),
			v1beta1.SchemeGroupVersion.WithKind("ManagedClusterInfo"),
			func() *v1beta1.ManagedClusterInfo { return &v1beta1.ManagedClusterInfo{} },
			func() *v1beta1.ManagedClusterInfoList { return &v1beta1.ManagedClusterInfoList{} },
			func(dst, src *v1beta1.ManagedClusterInfoList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.ManagedClusterInfoList) []*v1beta1.ManagedClusterInfo {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.ManagedClusterInfoList, items []*v1beta1.ManagedClusterInfo) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
