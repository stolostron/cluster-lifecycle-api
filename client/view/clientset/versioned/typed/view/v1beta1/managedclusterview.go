// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"

	scheme "github.com/stolostron/cluster-lifecycle-api/client/view/clientset/versioned/scheme"
	viewv1beta1 "github.com/stolostron/cluster-lifecycle-api/view/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ManagedClusterViewsGetter has a method to return a ManagedClusterViewInterface.
// A group's client should implement this interface.
type ManagedClusterViewsGetter interface {
	ManagedClusterViews(namespace string) ManagedClusterViewInterface
}

// ManagedClusterViewInterface has methods to work with ManagedClusterView resources.
type ManagedClusterViewInterface interface {
	Create(ctx context.Context, managedClusterView *viewv1beta1.ManagedClusterView, opts v1.CreateOptions) (*viewv1beta1.ManagedClusterView, error)
	Update(ctx context.Context, managedClusterView *viewv1beta1.ManagedClusterView, opts v1.UpdateOptions) (*viewv1beta1.ManagedClusterView, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, managedClusterView *viewv1beta1.ManagedClusterView, opts v1.UpdateOptions) (*viewv1beta1.ManagedClusterView, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*viewv1beta1.ManagedClusterView, error)
	List(ctx context.Context, opts v1.ListOptions) (*viewv1beta1.ManagedClusterViewList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *viewv1beta1.ManagedClusterView, err error)
	ManagedClusterViewExpansion
}

// managedClusterViews implements ManagedClusterViewInterface
type managedClusterViews struct {
	*gentype.ClientWithList[*viewv1beta1.ManagedClusterView, *viewv1beta1.ManagedClusterViewList]
}

// newManagedClusterViews returns a ManagedClusterViews
func newManagedClusterViews(c *ViewV1beta1Client, namespace string) *managedClusterViews {
	return &managedClusterViews{
		gentype.NewClientWithList[*viewv1beta1.ManagedClusterView, *viewv1beta1.ManagedClusterViewList](
			"managedclusterviews",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *viewv1beta1.ManagedClusterView { return &viewv1beta1.ManagedClusterView{} },
			func() *viewv1beta1.ManagedClusterViewList { return &viewv1beta1.ManagedClusterViewList{} },
		),
	}
}
