// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	scheme "github.com/stolostron/cluster-lifecycle-api/client/imageregistry/clientset/versioned/scheme"
	imageregistryv1alpha1 "github.com/stolostron/cluster-lifecycle-api/imageregistry/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ManagedClusterImageRegistriesGetter has a method to return a ManagedClusterImageRegistryInterface.
// A group's client should implement this interface.
type ManagedClusterImageRegistriesGetter interface {
	ManagedClusterImageRegistries(namespace string) ManagedClusterImageRegistryInterface
}

// ManagedClusterImageRegistryInterface has methods to work with ManagedClusterImageRegistry resources.
type ManagedClusterImageRegistryInterface interface {
	Create(ctx context.Context, managedClusterImageRegistry *imageregistryv1alpha1.ManagedClusterImageRegistry, opts v1.CreateOptions) (*imageregistryv1alpha1.ManagedClusterImageRegistry, error)
	Update(ctx context.Context, managedClusterImageRegistry *imageregistryv1alpha1.ManagedClusterImageRegistry, opts v1.UpdateOptions) (*imageregistryv1alpha1.ManagedClusterImageRegistry, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, managedClusterImageRegistry *imageregistryv1alpha1.ManagedClusterImageRegistry, opts v1.UpdateOptions) (*imageregistryv1alpha1.ManagedClusterImageRegistry, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*imageregistryv1alpha1.ManagedClusterImageRegistry, error)
	List(ctx context.Context, opts v1.ListOptions) (*imageregistryv1alpha1.ManagedClusterImageRegistryList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *imageregistryv1alpha1.ManagedClusterImageRegistry, err error)
	ManagedClusterImageRegistryExpansion
}

// managedClusterImageRegistries implements ManagedClusterImageRegistryInterface
type managedClusterImageRegistries struct {
	*gentype.ClientWithList[*imageregistryv1alpha1.ManagedClusterImageRegistry, *imageregistryv1alpha1.ManagedClusterImageRegistryList]
}

// newManagedClusterImageRegistries returns a ManagedClusterImageRegistries
func newManagedClusterImageRegistries(c *ImageregistryV1alpha1Client, namespace string) *managedClusterImageRegistries {
	return &managedClusterImageRegistries{
		gentype.NewClientWithList[*imageregistryv1alpha1.ManagedClusterImageRegistry, *imageregistryv1alpha1.ManagedClusterImageRegistryList](
			"managedclusterimageregistries",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *imageregistryv1alpha1.ManagedClusterImageRegistry {
				return &imageregistryv1alpha1.ManagedClusterImageRegistry{}
			},
			func() *imageregistryv1alpha1.ManagedClusterImageRegistryList {
				return &imageregistryv1alpha1.ManagedClusterImageRegistryList{}
			},
		),
	}
}
